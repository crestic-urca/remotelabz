# This file is a template, and might need editing before it works on your project.
# Select image from https://hub.docker.com/_/php/
image: php:7.2

# Select what we should cache between builds
cache:
  paths:
  - .env
  - vendor/
  - node_modules/

stages:
- prepare
- test
- deploy

before_script:
- apt-get update -yqq
- apt-get install -yqq git gnupg zlib1g-dev apt-transport-https ca-certificates
# Install PHP extensions
- docker-php-ext-install pdo_mysql zip opcache
# Install & enable Xdebug for code coverage reports
- pecl install xdebug
- docker-php-ext-enable xdebug
# Install and run Composer
- curl -sS https://getcomposer.org/installer | php
- php composer.phar install
# Install and run yarn
- curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
- echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
- curl -sL https://deb.nodesource.com/setup_11.x | bash
- apt-get install -yqq nodejs
- apt-get update -yqq
- apt-get install -yqq yarn
- yarn install
# Pack assets
- yarn encore dev

# Bring in any services we need http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
# See http://docs.gitlab.com/ce/ci/services/README.html for examples.
services:
  - mysql:5.7

# Set any variables we need
variables:
  # Configure mysql environment variables (https://hub.docker.com/r/_/mysql/)
  MYSQL_RANDOM_ROOT_PASSWORD: "yes"
  MYSQL_USER: symfony
  MYSQL_PASSWORD: $MYSQL_PASSWORD

configure:
  stage: prepare
  script:
    - bin/console doctrine:database:create -n
    - bin/console doctrine:migrations:migrate -n
    - bin/console doctrine:fixtures:load -n
    

# Run our tests
# If Xdebug was installed you can generate a coverage report and see code coverage metrics.
test:
  stage: test
  script:
    - bin/phpunit --configuration phpunit.xml.dist --coverage-text --colors=never