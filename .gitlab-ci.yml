stages:
  - build
  - test
  - deploy

variables:
  REGISTRY_URL: registry.remotelabz.com/$CI_PROJECT_PATH/
  MYSQL_DATABASE: symfony
  MYSQL_RANDOM_ROOT_PASSWORD: "yes"
  MYSQL_USER: symfony
  MYSQL_PASSWORD: $MYSQL_PASSWORD

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance.
    DOCKER_DRIVER: overlay2
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  tags:
    - build

tests:
  stage: test
  image: docker:stable
  services: 
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance.
    DOCKER_DRIVER: overlay2
  script:
    - cp -rf .env.dist .env
    - echo MYSQL_PASSWORD=$MYSQL_PASSWORD >> .env
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
    - docker run -d --rm --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=1 -e MYSQL_DATABASE=$MYSQL_DATABASE -e MYSQL_USER=$MYSQL_USER -e MYSQL_PASSWORD=$MYSQL_PASSWORD mysql:5.7
    - docker run -d --rm -p 8000:8000 -p 8888:8888 -v $(pwd)/.env:/var/www/html/remotelabz/.env --name remotelabz --link mysql $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - sleep 30
    - docker exec remotelabz php bin/console doctrine:migrations:migrate -n
    - docker exec remotelabz php bin/console doctrine:fixtures:load -n
    - docker exec remotelabz php bin/phpunit
  dependencies:
    - build
  tags:
    - test

# TODO stage with apache to upload on public server
deploy_review:
  stage: deploy
  script:
    - RANDOM_PORT=$(comm -23 <(seq 49152 65535 | sort) <(ss -tan | awk '{print $4}' | cut -d':' -f2 | grep "[0-9]\{1,5\}" | sort -u) | shuf | head -n 1)
    - cp -rf .env.dist .env
    - echo MYSQL_PASSWORD=$MYSQL_PASSWORD >> .env
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
    - docker run -d --rm --name mysql_$CI_COMMIT_REF_SLUG -e MYSQL_RANDOM_ROOT_PASSWORD=1 -e MYSQL_DATABASE=$MYSQL_DATABASE -e MYSQL_USER=$MYSQL_USER -e MYSQL_PASSWORD=$MYSQL_PASSWORD mysql:5.7
    - sleep 30
    - docker run -d --rm -p $RANDOM_PORT:8000 -p $((RANDOM_PORT+1)):8888 -v $(pwd)/.env:/var/www/html/remotelabz/.env --name remotelabz_$CI_COMMIT_REF_SLUG --link mysql_$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker exec remotelabz_$CI_COMMIT_REF_SLUG php bin/console doctrine:migrations:migrate -n
    - docker exec remotelabz_$CI_COMMIT_REF_SLUG php bin/console doctrine:fixtures:load -n
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://review.remotelabz.com/$CI_COMMIT_REF_SLUG-$RANDOM_PORT/
    # on_stop: stop_review
  tags:
    - review
  only:
    - branches
  except:
    - master

deploy_staging:
  stage: deploy
  script:
    - cp -rf .env.dist .env
    - echo MYSQL_PASSWORD=$MYSQL_PASSWORD >> .env
    - docker-compose stop
    - docker-compose pull
    - docker-compose up --no-start
    - docker-compose start apache mysql
    - docker-compose run -T composer install --no-progress --no-scripts --no-suggest
    - docker-compose run -T yarn install
    - docker-compose run -T yarn encore dev
    - docker-compose run -T console doctrine:migrations:migrate -n
    - docker-compose run -T console doctrine:fixtures:load -n
    - docker-compose run -T console assets:install --symlink public --relative
  environment:
    name: staging
    url: https://staging.remotelabz.com/
    # on_stop: stop_staging
  dependencies:
    - tests
  tags:
    - staging
  only: 
    - master

# stop_review:
#   stage: deploy
#   except: 
#     - master
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker stop remotelabz
#     - docker stop mysql
#   when: manual
#   environment:
#     name: Review
#     action: stop
#   tags:
#     - deploy

# Stop staging:
#   stage: deploy
#   only:
#     - master
#   variables:
#     GIT_STRATEGY: none
#   script:
#     - docker-compose stop
#   when: manual
#   environment:
#     name: Staging
#     action: stop
#   tags:
#     - staging