{% extends 'AppBundle::accueil_auth.html.twig' %}

{% block body %}

<div style="height:1024px">

		<div {# style="float:left"#}>

		{% include 'page.html' %}
		
		</div>

		{# <div id="noVNC_screen" style="float:right; width:720px">
            <div id="noVNC_status_bar" class="noVNC_status_bar" style="margin-top: 0px;"> 
                <table border=0 width="100%"><tr>
                 <td> <div id="noVNC_status" style="position: relative; height: auto;">
                        Chargement
                    </div></td>
                    <td width="1%"><div id="noVNC_buttons">
                        <input type=button value="Send CtrlAltDel"
                            id="sendCtrlAltDelButton">
                        <span id="noVNC_xvp_buttons">
                        <input type=button value="Shutdown"
                            id="xvpShutdownButton">
                        <input type=button value="Reboot"
                            id="xvpRebootButton">
                        <input type=button value="Reset"
                            id="xvpResetButton">
                        </span>
                            </div></td>
                </tr></table>
            </div>
            <canvas id="noVNC_canvas" width="640px" height="20px">
                Canvas not supported.
            </canvas>
		</div>	#}
</div>
	
{% endblock%}

{% block javascripts %}
{#<script src="{{asset('js/novnc/util.js')}}"></script>#}
 <script>
        /*jslint white: false */
        /*global window, $, Util, RFB, */
        "use strict";

       // Load supporting scripts
{#        Util.load_scripts(["{{asset('js/novnc/webutil.js')}}", "{{asset('js/novnc/base64.js')}}",
							"{{asset('js/novnc/websock.js')}}", "{{asset('js/novnc/des.js')}}",
                           "{{asset('js/novnc/keysymdef.js')}}", "{{asset('js/novnc/keyboard.js')}}",
						   "{{asset('js/novnc/input.js')}}", "{{asset('js/novnc/display.js')}}",
                           "{{asset('js/novnc/inflator.js')}}", "{{asset('js/novnc/rfb.js')}}",
						   "{{asset('js/novnc/keysym.js')}}"]);
		
        var rfb;
        var resizeTimeout;


        function UIresize() {
            if (WebUtil.getConfigVar('resize', false)) {
                var innerW = window.innerWidth;
                var innerH = window.innerHeight;
                var controlbarH = $D('noVNC_status_bar').offsetHeight;
                var padding = 5;
                if (innerW !== undefined && innerH !== undefined)
                    rfb.setDesktopSize(innerW, innerH - controlbarH - padding);
            }
        }
        function FBUComplete(rfb, fbu) {
            UIresize();
            rfb.set_onFBUComplete(function() { });
        }
        function passwordRequired(rfb) {
            var msg;
            msg = '<form onsubmit="return setPassword();"';
            msg += '  style="margin-bottom: 0px">';
            msg += 'Password Required: ';
            msg += '<input type=password size=10 id="password_input" class="noVNC_status">';
            msg += '<\/form>';
            $D('noVNC_status_bar').setAttribute("class", "noVNC_status_warn");
            $D('noVNC_status').innerHTML = msg;
        }
        function setPassword() {
            rfb.sendPassword($D('password_input').value);
            return false;
        }
        function sendCtrlAltDel() {
            rfb.sendCtrlAltDel();
            return false;
        }
        function xvpShutdown() {
            rfb.xvpShutdown();
            return false;
        }
        function xvpReboot() {
            rfb.xvpReboot();
            return false;
        }
        function xvpReset() {
            rfb.xvpReset();
            return false;
        }
        function updateState(rfb, state, oldstate, msg) {
            var s, sb, cad, level;
            s = $D('noVNC_status');
            sb = $D('noVNC_status_bar');
            cad = $D('sendCtrlAltDelButton');
            switch (state) {
                case 'failed':       level = "error";  break;
                case 'fatal':        level = "error";  break;
                case 'normal':       level = "normal"; break;
                case 'disconnected': level = "normal"; break;
                case 'loaded':       level = "normal"; break;
                default:             level = "warn";   break;
            }

            if (state === "normal") {
                cad.disabled = false;
            } else {
                cad.disabled = true;
                xvpInit(0);
            }

            if (typeof(msg) !== 'undefined') {
                sb.setAttribute("class", "noVNC_status_" + level);
                s.innerHTML = msg;
            }
        }

        window.onresize = function () {
            // When the window has been resized, wait until the size remains
            // the same for 0.5 seconds before sending the request for changing
            // the resolution of the session
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function(){
                UIresize();
            }, 500);
        };

        function xvpInit(ver) {
            var xvpbuttons;
            xvpbuttons = $D('noVNC_xvp_buttons');
            if (ver >= 1) {
                xvpbuttons.style.display = 'inline';
            } else {
                xvpbuttons.style.display = 'none';
            }
        }
		#}
        
		
		{% for device in tp_array['devices'] %}
			window.open("{{path('view_vm',{'device_id':device.id,'protocol':device.protocol,'port':device.port})}}", "{{user}}VM{{loop.index}}", "location=1,menubar=1,directories=1,scrollbars=1,status=1,toolbar=1,resizable=1,top=10,left=10,width=1100,height=820");
		{% endfor %}
			
		{#	
			var host, port, password, path, token;
			            
			$D('sendCtrlAltDelButton').style.display = "inline";
            $D('sendCtrlAltDelButton').onclick = sendCtrlAltDel;
            $D('xvpShutdownButton').onclick = xvpShutdown;
            $D('xvpRebootButton').onclick = xvpReboot;
            $D('xvpResetButton').onclick = xvpReset;

            WebUtil.init_logging(WebUtil.getConfigVar('logging', 'warn'));
            document.title = unescape(WebUtil.getConfigVar('title', 'noVNC'));
            // By default, use the host and port of server that served this file
            //host = WebUtil.getConfigVar('host', window.location.hostname);
			host = '{{ host }}';
            // port = WebUtil.getConfigVar('port', window.location.port);
			port = '{{ port }}';
            // if port == 80 (or 443) then it won't be present and should be
            // set manually
            if (!port) {
                if (window.location.protocol.substring(0,5) == 'https') {
                    port = 443;
                }
                else if (window.location.protocol.substring(0,4) == 'http') {
                    port = 80;
                }
            }

            password = WebUtil.getConfigVar('password', '');
            path = WebUtil.getConfigVar('path', 'websockify');

            // If a token variable is passed in, set the parameter in a cookie.
            // This is used by nova-novncproxy.
            token = WebUtil.getConfigVar('token', null);
            if (token) {

                // if token is already present in the path we should use it
                path = WebUtil.injectParamIfMissing(path, "token", token);

                WebUtil.createCookie('token', token, 1)
            }

            if ((!host) || (!port)) {
                updateState(null, 'fatal', null, 'Must specify host and port in URL');
                return;
            }

            try {
                rfb = new RFB({'target':       $D('noVNC_canvas'),
                               'encrypt':      WebUtil.getConfigVar('encrypt',
                                        (window.location.protocol === "https:")),
                               'repeaterID':   WebUtil.getConfigVar('repeaterID', ''),
                               'true_color':   WebUtil.getConfigVar('true_color', true),
                               'local_cursor': WebUtil.getConfigVar('cursor', true),
                               'shared':       WebUtil.getConfigVar('shared', true),
                               'view_only':    WebUtil.getConfigVar('view_only', false),
                               'onUpdateState':  updateState,
                               'onXvpInit':    xvpInit,
                               'onPasswordRequired':  passwordRequired,
                               'onFBUComplete': FBUComplete});
            } catch (exc) {
                updateState(null, 'fatal', null, 'Unable to create RFB client -- ' + exc);
                return; // don't continue trying to connect
            }

            rfb.connect(host, port, password, path);
		#}
        
        </script>

{% endblock %}