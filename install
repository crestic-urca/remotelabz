#!/usr/bin/env php
<?php

const REMOTELABZ_PATH           = "/opt/remotelabz";
const REMOTELABZ_PORT           = 80;
const REMOTELABE_SERVER_NAME    = "remotelabz.com";
const INSTALL_LOG_PATH          = "/var/log/remotelabz/install.log";

class Logger
{
    /**
     * @var resource|null $this->handle Log file descriptor.
     */
    private $handle;

    /**
     * @var string $dateFormat Date format for the log.
     */
    private $dateFormat;
    
    public const PRINT_DEFAULT  = "\e[39m";
    public const PRINT_YELLOW   = "\e[33m";
    public const PRINT_RED      = "\e[31m";

    function __construct($file = null, $dateFormat = DATE_RFC2822) {
        if ($file !== null) {
            $dir = dirname($file);
            if ( !is_dir($dir) ) {
                mkdir($dir);
            }
            $this->handle = fopen($file, "a");
        }
        $this->dateFormat = $dateFormat;
    }

    function __destruct() {
        if ($this->handle !== null) {
            fclose($this->handle);
        }
    }

    function debug($string) {
        if ($this->handle !== null) {
            fprintf($this->handle, "[%s] %s\n", date($this->dateFormat), $string);
        }
    }

    function warning($string) {
        $this->debug("WARNING: $string");
    }

    function error($string) {
        $this->debug("ERROR: $string");
    }
}

function print_c($string, $color = Logger::PRINT_DEFAULT) {
    printf($color . "%s" . Logger::PRINT_DEFAULT, $string);
}

class Installer {

    /**
     * Logger object to handle logs
     *
     * @var Logger $logger
     */
    private $logger;

    /**
     * Where to install RemoteLabz.
     *
     * @var string $installPath
     */
    private $installPath;

    function __construct($logger = null)
    {
        $this->logger = $logger;
        if ($logger == null) {
            $this->logger = new Logger();
        }
    }

    function setInstallPath($installPath) : void {
        $this->installPath = $installPath;
    }

    /**
     * Check if this script is executed as root.
     *
     * @return void
     */
    function checkRoot() {
        $username = posix_getpwuid(posix_geteuid())['name'];
        if ($username != "root") {
            throw new Exception("Installation aborted, root is required! Please launch this script as root or with sudo.");
        }
    }

    /**
     * Check if a command is installed on a system.
     *
     * @param string $cmd The command
     * @return void
     */
    function commandExists($cmd) {
        $return = shell_exec(sprintf("which %s", escapeshellarg($cmd)));
        return !empty($return);
    }

    /**
     * Check that all requirements are installed on a system.
     *
     * @return void
     */
    function checkRequirements() {
        if (!(strnatcmp(phpversion(), '7.2.0') >= 0)) {
            throw new Exception("You need PHP 7.2 or higher to use RemoteLabz. Please upgrade your PHP version to continue.");
        }
        if (!$this->commandExists("apache2ctl")) {
            throw new Exception("Apache 2 has not been found on your system. Please install Composer to continue.");
        }
        if (!$this->commandExists("composer")) {
            throw new Exception("Composer has not been found on your system. Please install Composer to continue.");
        }
    }

    /**
     * Full workflow of RemoteLabz installation.
     *
     * @return void
     */
    function install($port = 80, $serverName = "remotelabz.com") {
        $this->logger->debug("Starting RemoteLabz installation");
        echo "Welcome to RemoteLabz!\n";
    
        // Copy self-directory into destination
        $this->logger->debug("Copying files to ".$this->installPath);
        echo "📁 Copying files to ".$this->installPath."... ";
        if ($this->copyFiles()) {
            $this->logger->debug("Files has been moved to ".$this->installPath);
            echo "OK ✔️\n";
        } else {
            $this->logger->warning("Install directory already exists. Not copying files.");
            print_c("Warning: Target directory exists. Files will not be copied.\n", Logger::PRINT_YELLOW);
        }

        $directoryError = "There was a problem switching to install dir.";
        // Goto new directory
        if (chdir($this->installPath) == false) {
            throw new Exception($directoryError);
        }
        // Check new dir
        if (getcwd() !== $this->installPath) {
            throw new Exception($directoryError);
        }

        // Install composer packages
        $this->logger->debug("Downloading Composer packages");
        echo "🎶 Downloading Composer packages... ";
        if ($this->handleComposer()) {
            $this->logger->debug("Finished downloading Composer packages");
            echo "OK ✔️\n";
        } else {
            throw new Exception("There was an error downloading composer packages.");
        }
        
        // TODO: Warm cache
        $this->logger->debug("Warming cache");
        echo "🔥 Warming cache... ";
        if ($this->warmCache()) {
            $this->logger->debug("Finished warming cache");
            echo "OK ✔️\n";
        } else {
            throw new Exception("There was an error warming app cache.");
        }

        // Handle file permissions
        $this->logger->debug("Handling file permissions");
        echo "👮‍ Setting file permissions... ";
        $returnCode = 0;
        $output = [];
        exec("getent passwd remotelabz > /dev/null", $output, $returnCode);
        if ($returnCode != 0) {
            exec("useradd remotelabz");
        }
        exec("getent group remotelabz > /dev/null", $output, $returnCode);
        if ($returnCode != 0) {
            exec("groupadd remotelabz");
        }
        try {
            $this->rchown($this->installPath, "remotelabz", "www-data");
            echo "OK ✔️\n";
        } catch (Exception $e) {
            throw new Exception("Error setting file permissions.", 0, $e);
        }

        // TODO: Configure apache
        $this->logger->debug("Configuring Apache");
        $this->logger->debug("Port: " . $port);
        $this->logger->debug("Server name: " . $serverName);
        echo "🌎 Configuring Apache... ";
        try {
            $this->configureApache($port, $serverName);
            echo "OK ✔️\n";
        } catch (Exception $e) {
            throw new Exception("Error while configuring Apache.", 0, $e);
        }

        $this->logger->debug("Finished RemoteLabz installation");
        echo "Done!\n";
        echo "RemoteLabz is installed! 🔥\n";
        echo "Thank you for using our software. ❤️\n";
    }

    /**
     * Copy current directory to target installation directory if it's not done already.
     *
     * @return boolean Returns `true` if everything went well, returns `false` otherwise.
     */
    private function copyFiles() : bool {
        // Check if directory is already to the right place
        if (dirname(__FILE__) != $this->installPath) {
            // Check if there is already a directory
            if (is_dir($this->installPath)) {
                return false;
            }
            // Copy files
            $this->rcopy(dirname(__FILE__), $this->installPath);
            return true;
        } else {
            return false;
        }
    }

    /**
     * Handle Composer packages installation.
     *
     * @return boolean Returns `true` if everything went well, returns `false` otherwise.
     */
    private function handleComposer() : bool {
        $returnCode = 0;
        $output = [];
        exec("COMPOSER_ALLOW_SUPERUSER=1 composer install --no-progress --no-suggest 2>&3", $output, $returnCode);
        foreach ($output as $line) {
            $this->logger->debug($line);
        }
        if ($returnCode != 0) {
            return false;
        }
        return true;
    }

    /**
     * Warming application cache.
     *
     * @return boolean Returns `true` if everything went well, returns `false` otherwise.
     */
    private function warmCache() : bool {
        $returnCode = 0;
        $output = [];
        exec("php ". $this->installPath."/bin/console cache:warm", $output, $returnCode);
        foreach ($output as $line) {
            $this->logger->debug($line);
        }
        if ($returnCode != 0) {
            return false;
        }
        return true;
    }

    private function configureApache($port, $serverName) {
        $portsFileContent = file_get_contents("/etc/apache2/ports.conf");
        if (preg_match("/Listen ${port}$/m", $portsFileContent) === 1) {
            $this->logger->debug("Port ${port} is already configured in Apache.");
        } else {
            file_put_contents("/etc/apache2/ports.conf", "\nListen ${port}\n", FILE_APPEND);
        }
        copy($this->installPath."/config/apache/100-remotelabz.conf", "/etc/apache2/sites-available/100-remotelabz.conf");
        $configFileContent = file_get_contents("/etc/apache2/sites-available/100-remotelabz.conf");
        preg_replace("/^<VirtualHost *:80>$/", "<VirtualHost *:${port}>", $configFileContent);
        preg_replace("/ServerName remotelabz.com/", "ServerName ${serverName}", $configFileContent);
        file_put_contents("/etc/apache2/sites-available/100-remotelabz.conf", $configFileContent);
        if (!is_file("/etc/apache2/sites-enabled/100-remotelabz.conf")) {
            symlink("/etc/apache2/sites-available/100-remotelabz.conf", "/etc/apache2/sites-enabled/100-remotelabz.conf");
        }
        $this->logger->debug("Restarting Apache");
        $returnCode = 0;
        $output = [];
        exec("apache2ctl restart 2>&3", $output, $returnCode);
        foreach ($output as $line) {
            $this->logger->debug($line);
        }
        if ($returnCode != 0) {
            throw new Exception("Could not restart Apache correctly.");
        }
    }

    /**
     * Recursively copy a folder.
     *
     * @param string $src Source directory
     * @param string $dst Target directory
     * @return void
     */
    private function rcopy($src, $dst) {
        $dir = opendir($src); 
        @mkdir($dst); 
        while(false !== ( $file = readdir($dir)) ) { 
            if (( $file != '.' ) && ( $file != '..' )) { 
                if ( is_dir($src . '/' . $file) ) { 
                    $this->rcopy($src . '/' . $file, $dst . '/' . $file); 
                } 
                else { 
                    copy($src . '/' . $file, $dst . '/' . $file); 
                } 
            } 
        }
        closedir($dir); 
    }

    /**
     * Recursively change owner user and group of a folder.
     *
     * @param string $dir The directory to manage
     * @param string|int $user The new owner user
     * @param string|int $group The new owner group
     * @return void
     */
    function rchown($dir, $user, $group) {
        if (!($d = opendir($dir))) {
            throw new Exception("Error while opening directory ${dir}: Directory does not exists or is not reachable.");
        }
        while(false !== ( $file = readdir($d)) ) {
            if (( $file != "." ) && ( $file != ".." )) {
                $path = $dir . "/" . $file ;

                if (is_dir($path)) {
                    $this->rchown($path, $user, $group);
                } else {
                    if (!chown($path, $user)) {
                        throw new Exception("Can't set permission of file ${path}: Permission refused or user does not exists.");
                    }
                    if (!chgrp($path, $group)) {
                        throw new Exception("Can't set permission of file ${path}: Permission refused or group does not exists..");
                    }
                }
            }
        }
        closedir($d);
    } 
}

$logger = new Logger(INSTALL_LOG_PATH);
$installer = new Installer($logger);
$installer
    ->setInstallPath(REMOTELABZ_PATH)
;

try {
    $installer->checkRoot();
} catch (Exception $e) {
    print_c($e->getMessage()."\n", Logger::PRINT_RED);
    exit(1);
}

try {
    $installer->checkRequirements();
} catch (Exception $e) {
    print_c($e->getMessage()."\n", Logger::PRINT_RED);
    $logger->error($e->getMessage());
    exit(1);
}

try {
    $installer->install(REMOTELABZ_PORT, REMOTELABE_SERVER_NAME);
} catch (Exception $e) {
    echo "Error ❌\n";
    $count = 0;
    while ($e !== null) {
        $logger->error($e->getMessage());
        print_c("#$count ".$e->getFile()."(".$e->getLine()."): ".$e->getMessage()."\n", Logger::PRINT_RED);
        $e = $e->getPrevious();
        $count++;
    }
    print_c("Please check the install logs in ".INSTALL_LOG_PATH." to get more information.\n", Logger::PRINT_RED);
    exit(1);
}

exit(0);